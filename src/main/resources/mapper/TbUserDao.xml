<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.makiyo.dao.TbUserDao">
  <resultMap id="BaseResultMap" type="com.makiyo.pojo.TbUser">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="open_id" jdbcType="VARCHAR" property="openId" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="photo" jdbcType="VARCHAR" property="photo" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="sex" jdbcType="OTHER" property="sex" />
    <result column="tel" jdbcType="CHAR" property="tel" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="hiredate" jdbcType="DATE" property="hiredate" />
    <result column="role" jdbcType="OTHER" property="role" />
    <result column="root" jdbcType="BOOLEAN" property="root" />
    <result column="dept_id" jdbcType="INTEGER" property="deptId" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, username, `password`, open_id, nickname, photo, `name`, sex, tel, email, hiredate,
    `role`, root, dept_id, `status`, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tb_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.makiyo.pojo.TbUser" useGeneratedKeys="true">
    insert into tb_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="openId != null">
        open_id,
      </if>
      <if test="nickname != null">
        nickname,
      </if>
      <if test="photo != null">
        photo,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="tel != null">
        tel,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="hiredate != null">
        hiredate,
      </if>
      <if test="role != null">
        `role`,
      </if>
      <if test="root != null">
        root,
      </if>
      <if test="deptId != null">
        dept_id,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="openId != null">
        #{openId,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="photo != null">
        #{photo,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=OTHER},
      </if>
      <if test="tel != null">
        #{tel,jdbcType=CHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="hiredate != null">
        #{hiredate,jdbcType=DATE},
      </if>
      <if test="role != null">
        #{role,jdbcType=OTHER},
      </if>
      <if test="root != null">
        #{root,jdbcType=BOOLEAN},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.makiyo.pojo.TbUser">
    update tb_user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="openId != null">
        open_id = #{openId,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="photo != null">
        photo = #{photo,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=OTHER},
      </if>
      <if test="tel != null">
        tel = #{tel,jdbcType=CHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="hiredate != null">
        hiredate = #{hiredate,jdbcType=DATE},
      </if>
      <if test="role != null">
        `role` = #{role,jdbcType=OTHER},
      </if>
      <if test="root != null">
        root = #{root,jdbcType=BOOLEAN},
      </if>
      <if test="deptId != null">
        dept_id = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.makiyo.pojo.TbUser">
    update tb_user
    set username = #{username,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR},
      open_id = #{openId,jdbcType=VARCHAR},
      nickname = #{nickname,jdbcType=VARCHAR},
      photo = #{photo,jdbcType=VARCHAR},
      `name` = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=OTHER},
      tel = #{tel,jdbcType=CHAR},
      email = #{email,jdbcType=VARCHAR},
      hiredate = #{hiredate,jdbcType=DATE},
      `role` = #{role,jdbcType=OTHER},
      root = #{root,jdbcType=BOOLEAN},
      dept_id = #{deptId,jdbcType=INTEGER},
      `status` = #{status,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="haveRootUser" resultType="boolean">
    select if(count(*),true,false ) from tb_user where root = 1;
  </select>
  <insert id="insert" parameterType="HashMap">
    INSERT INTO tb_user
    SET
    <if test="openId!=null">
      open_id = #{openId},
    </if>
    <if test="nickname!=null">
      nickname = #{nickname},
    </if>
    <if test="photo!=null">
      photo = #{photo},
    </if>
    <if test="name!=null">
      name = #{name},
    </if>
    <if test="sex!=null">
      sex = #{sex},
    </if>
    <if test="tel!=null">
      tel = #{tel},
    </if>
    <if test="email!=null">
      email=#{email},
    </if>
    <if test="hiredate!=null">
      hiredate = #{hiredate},
    </if>
    role = #{role},
    root = #{root},
    <if test="deptName!=null">
      dept_id = ( SELECT id FROM tb_dept WHERE dept_name = #{deptName} ),
    </if>
    status = #{status},
    create_time = #{createTime}
  </insert>
  <select id="searchIdByOpenId" parameterType="String" resultType="Integer">
    SELECT id FROM tb_user WHERE open_id=#{openId} AND status = 1
  </select>
  <select id="searchUserPermissions" parameterType="int" resultType="String">
    SELECT DISTINCT p.permission_name
    FROM tb_user u
           JOIN tb_role r ON JSON_CONTAINS(u.role, CAST(r.id AS CHAR))
           JOIN tb_permission p ON JSON_CONTAINS(r.permissions, CAST(p.id AS CHAR))
    WHERE u.id=#{userId} AND u.status=1;
  </select>
  <select id="searchById" parameterType="int" resultType="com.makiyo.pojo.TbUser">
    SELECT
      id, open_id, nickname, photo, name, sex, tel, role, root, dept_id, status, create_time
    FROM tb_user WHERE id=#{userId} AND status=1
  </select>
  <select id="searchUserHiredate" parameterType="int" resultType="String">
    select hiredate from tb_user
    where id=#{userId} and status=1
  </select>
  <select id="searchUserSummary" parameterType="int" resultType="HashMap">
    select u.name, u.photo, d.dept_name as deptName
    from tb_user u left join tb_dept d on u.dept_id=d.id
    where u.id=#{userId} and u.status=1
  </select>
  <select id="searchUserGroupByDept" parameterType="String" resultType="HashMap">
    SELECT
    d.id AS deptId,
    d.dept_name AS deptName,
    u.id AS userId,
    u.name
    FROM tb_dept d JOIN tb_user u ON u.dept_id=d.id
    WHERE u.status=1
    <if test="keyword!=null">
      AND u.name LIKE '%${keyword}%'
    </if>
    ORDER BY d.id, u.id;
  </select>
  <select id="searchMembers" parameterType="list" resultType="HashMap">
    SELECT id,name,photo
    FROM tb_user
    WHERE status = 1
    AND id IN
    <foreach collection="list" item="one" separator="," open="(" close=")">
      #{one}
    </foreach>
  </select>
  <select id="webLogin" parameterType="HashMap" resultType="Integer">
    select id
    from tb_user
    where username = #{username}
        and password = HEX(AES_ENCRYPT(#{password},#{username}))
    limit 1;
  </select>
  <select id="searchUserInfo" parameterType="int" resultType="HashMap">
    SELECT
      u.open_id AS openId,
      u.nickname,
      u.name,
      u.photo,
      u.sex,
      u.tel,
      u.email,
      d.dept_name AS dept,
      u.hiredate,
      CASE u.status
        WHEN 1 THEN "在职"
        WHEN 2 THEN "离职"
        END AS status,
      ( SELECT GROUP_CONCAT( role_name separator "，" ) FROM tb_role WHERE JSON_CONTAINS ( u.role, CONVERT ( id, CHAR ) ) ) AS roles
    FROM tb_user u
           LEFT JOIN tb_dept d ON u.dept_id = d.id
    WHERE u.id = #{userId} AND u.status = 1
  </select>
  <select id="searchDeptManagerId" parameterType="int" resultType="int">
    SELECT
      u2.id
    FROM tb_user u1 JOIN tb_user u2 ON u1.dept_id=u2.dept_id
                    JOIN tb_role r ON JSON_CONTAINS(u2.role, CAST(r.id AS CHAR))
    WHERE u1.id=#{id} AND r.id=2 AND u1.status = 1 AND u2.status = 1
  </select>
  <select id="searchGmId" resultType="int">
    SELECT
      u.id
    FROM tb_user u
           JOIN tb_role r ON JSON_CONTAINS(u.role, CAST(r.id AS CHAR))
    WHERE r.id=1 AND u.status = 1
  </select>
  <select id="selectUserPhotoAndName" parameterType="list" resultType="HashMap">
    SELECT
    id,name,photo
    FROM tb_user
    WHERE status = 1 AND id IN
    <foreach collection="list" open="(" close=")" item="one" separator=",">
      #{one}
    </foreach>
  </select>
  <select id="searchMemberEmail" parameterType="int" resultType="String">
    SELECT email FROM tb_user WHERE id=#{id} AND status = 1
  </select>
</mapper>
